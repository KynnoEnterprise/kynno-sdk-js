/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: kynno/nft/query.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../gogoproto/gogo";
import * as dependency_2 from "./../../google/api/annotations";
import * as dependency_3 from "./nft";
import * as dependency_4 from "./../../cosmos/base/query/v1beta1/pagination";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export namespace kynno.nft {
    export class QuerySupplyRequest extends pb_1.Message {
        constructor(data?: any[] | {
            denom_id?: string;
            owner?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
            }
        }
        get denom_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            denom_id?: string;
            owner?: string;
        }) {
            const message = new QuerySupplyRequest({});
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            return message;
        }
        toObject() {
            const data: {
                denom_id?: string;
                owner?: string;
            } = {};
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(1, this.denom_id);
            if (typeof this.owner === "string" && this.owner.length)
                writer.writeString(2, this.owner);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySupplyRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySupplyRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom_id = reader.readString();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySupplyRequest {
            return QuerySupplyRequest.deserialize(bytes);
        }
    }
    export class QuerySupplyResponse extends pb_1.Message {
        constructor(data?: any[] | {
            amount?: number;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("amount" in data && data.amount != undefined) {
                    this.amount = data.amount;
                }
            }
        }
        get amount() {
            return pb_1.Message.getField(this, 1) as number;
        }
        set amount(value: number) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            amount?: number;
        }) {
            const message = new QuerySupplyResponse({});
            if (data.amount != null) {
                message.amount = data.amount;
            }
            return message;
        }
        toObject() {
            const data: {
                amount?: number;
            } = {};
            if (this.amount != null) {
                data.amount = this.amount;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.amount !== undefined)
                writer.writeUint64(1, this.amount);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QuerySupplyResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QuerySupplyResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.amount = reader.readUint64();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QuerySupplyResponse {
            return QuerySupplyResponse.deserialize(bytes);
        }
    }
    export class QueryOwnerRequest extends pb_1.Message {
        constructor(data?: any[] | {
            denom_id?: string;
            owner?: string;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get denom_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get owner() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set owner(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 3) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 3, value);
        }
        static fromObject(data: {
            denom_id?: string;
            owner?: string;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryOwnerRequest({});
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.owner != null) {
                message.owner = data.owner;
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                denom_id?: string;
                owner?: string;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.owner != null) {
                data.owner = this.owner;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(1, this.denom_id);
            if (typeof this.owner === "string" && this.owner.length)
                writer.writeString(2, this.owner);
            if (this.pagination !== undefined)
                writer.writeMessage(3, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOwnerRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOwnerRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom_id = reader.readString();
                        break;
                    case 2:
                        message.owner = reader.readString();
                        break;
                    case 3:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOwnerRequest {
            return QueryOwnerRequest.deserialize(bytes);
        }
    }
    export class QueryOwnerResponse extends pb_1.Message {
        constructor(data?: any[] | {
            owner?: dependency_3.kynno.nft.Owner;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("owner" in data && data.owner != undefined) {
                    this.owner = data.owner;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get owner() {
            return pb_1.Message.getWrapperField(this, dependency_3.kynno.nft.Owner, 1) as dependency_3.kynno.nft.Owner;
        }
        set owner(value: dependency_3.kynno.nft.Owner) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            owner?: ReturnType<typeof dependency_3.kynno.nft.Owner.prototype.toObject>;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryOwnerResponse({});
            if (data.owner != null) {
                message.owner = dependency_3.kynno.nft.Owner.fromObject(data.owner);
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                owner?: ReturnType<typeof dependency_3.kynno.nft.Owner.prototype.toObject>;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.owner != null) {
                data.owner = this.owner.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.owner !== undefined)
                writer.writeMessage(1, this.owner, () => this.owner.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryOwnerResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryOwnerResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.owner, () => message.owner = dependency_3.kynno.nft.Owner.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryOwnerResponse {
            return QueryOwnerResponse.deserialize(bytes);
        }
    }
    export class QueryCollectionRequest extends pb_1.Message {
        constructor(data?: any[] | {
            denom_id?: string;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get denom_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 2) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            denom_id?: string;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryCollectionRequest({});
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                denom_id?: string;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(1, this.denom_id);
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCollectionRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCollectionRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom_id = reader.readString();
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCollectionRequest {
            return QueryCollectionRequest.deserialize(bytes);
        }
    }
    export class QueryCollectionResponse extends pb_1.Message {
        constructor(data?: any[] | {
            collection?: dependency_3.kynno.nft.Collection;
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("collection" in data && data.collection != undefined) {
                    this.collection = data.collection;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get collection() {
            return pb_1.Message.getWrapperField(this, dependency_3.kynno.nft.Collection, 1) as dependency_3.kynno.nft.Collection;
        }
        set collection(value: dependency_3.kynno.nft.Collection) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            collection?: ReturnType<typeof dependency_3.kynno.nft.Collection.prototype.toObject>;
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryCollectionResponse({});
            if (data.collection != null) {
                message.collection = dependency_3.kynno.nft.Collection.fromObject(data.collection);
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                collection?: ReturnType<typeof dependency_3.kynno.nft.Collection.prototype.toObject>;
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.collection != null) {
                data.collection = this.collection.toObject();
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.collection !== undefined)
                writer.writeMessage(1, this.collection, () => this.collection.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryCollectionResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryCollectionResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.collection, () => message.collection = dependency_3.kynno.nft.Collection.deserialize(reader));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryCollectionResponse {
            return QueryCollectionResponse.deserialize(bytes);
        }
    }
    export class QueryDenomRequest extends pb_1.Message {
        constructor(data?: any[] | {
            denom_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
            }
        }
        get denom_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        static fromObject(data: {
            denom_id?: string;
        }) {
            const message = new QueryDenomRequest({});
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            return message;
        }
        toObject() {
            const data: {
                denom_id?: string;
            } = {};
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(1, this.denom_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDenomRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDenomRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDenomRequest {
            return QueryDenomRequest.deserialize(bytes);
        }
    }
    export class QueryDenomResponse extends pb_1.Message {
        constructor(data?: any[] | {
            denom?: dependency_3.kynno.nft.Denom;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom" in data && data.denom != undefined) {
                    this.denom = data.denom;
                }
            }
        }
        get denom() {
            return pb_1.Message.getWrapperField(this, dependency_3.kynno.nft.Denom, 1) as dependency_3.kynno.nft.Denom;
        }
        set denom(value: dependency_3.kynno.nft.Denom) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            denom?: ReturnType<typeof dependency_3.kynno.nft.Denom.prototype.toObject>;
        }) {
            const message = new QueryDenomResponse({});
            if (data.denom != null) {
                message.denom = dependency_3.kynno.nft.Denom.fromObject(data.denom);
            }
            return message;
        }
        toObject() {
            const data: {
                denom?: ReturnType<typeof dependency_3.kynno.nft.Denom.prototype.toObject>;
            } = {};
            if (this.denom != null) {
                data.denom = this.denom.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.denom !== undefined)
                writer.writeMessage(1, this.denom, () => this.denom.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDenomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDenomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.denom, () => message.denom = dependency_3.kynno.nft.Denom.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDenomResponse {
            return QueryDenomResponse.deserialize(bytes);
        }
    }
    export class QueryDenomsRequest extends pb_1.Message {
        constructor(data?: any[] | {
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageRequest, 1) as dependency_4.cosmos.base.query.v1beta1.PageRequest;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageRequest) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
        }) {
            const message = new QueryDenomsRequest({});
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageRequest.prototype.toObject>;
            } = {};
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.pagination !== undefined)
                writer.writeMessage(1, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDenomsRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDenomsRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageRequest.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDenomsRequest {
            return QueryDenomsRequest.deserialize(bytes);
        }
    }
    export class QueryDenomsResponse extends pb_1.Message {
        constructor(data?: any[] | {
            denoms?: dependency_3.kynno.nft.Denom[];
            pagination?: dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [1], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denoms" in data && data.denoms != undefined) {
                    this.denoms = data.denoms;
                }
                if ("pagination" in data && data.pagination != undefined) {
                    this.pagination = data.pagination;
                }
            }
        }
        get denoms() {
            return pb_1.Message.getRepeatedWrapperField(this, dependency_3.kynno.nft.Denom, 1) as dependency_3.kynno.nft.Denom[];
        }
        set denoms(value: dependency_3.kynno.nft.Denom[]) {
            pb_1.Message.setRepeatedWrapperField(this, 1, value);
        }
        get pagination() {
            return pb_1.Message.getWrapperField(this, dependency_4.cosmos.base.query.v1beta1.PageResponse, 2) as dependency_4.cosmos.base.query.v1beta1.PageResponse;
        }
        set pagination(value: dependency_4.cosmos.base.query.v1beta1.PageResponse) {
            pb_1.Message.setWrapperField(this, 2, value);
        }
        static fromObject(data: {
            denoms?: ReturnType<typeof dependency_3.kynno.nft.Denom.prototype.toObject>[];
            pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
        }) {
            const message = new QueryDenomsResponse({});
            if (data.denoms != null) {
                message.denoms = data.denoms.map(item => dependency_3.kynno.nft.Denom.fromObject(item));
            }
            if (data.pagination != null) {
                message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.fromObject(data.pagination);
            }
            return message;
        }
        toObject() {
            const data: {
                denoms?: ReturnType<typeof dependency_3.kynno.nft.Denom.prototype.toObject>[];
                pagination?: ReturnType<typeof dependency_4.cosmos.base.query.v1beta1.PageResponse.prototype.toObject>;
            } = {};
            if (this.denoms != null) {
                data.denoms = this.denoms.map((item: dependency_3.kynno.nft.Denom) => item.toObject());
            }
            if (this.pagination != null) {
                data.pagination = this.pagination.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.denoms !== undefined)
                writer.writeRepeatedMessage(1, this.denoms, (item: dependency_3.kynno.nft.Denom) => item.serialize(writer));
            if (this.pagination !== undefined)
                writer.writeMessage(2, this.pagination, () => this.pagination.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryDenomsResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryDenomsResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.denoms, () => pb_1.Message.addToRepeatedWrapperField(message, 1, dependency_3.kynno.nft.Denom.deserialize(reader), dependency_3.kynno.nft.Denom));
                        break;
                    case 2:
                        reader.readMessage(message.pagination, () => message.pagination = dependency_4.cosmos.base.query.v1beta1.PageResponse.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryDenomsResponse {
            return QueryDenomsResponse.deserialize(bytes);
        }
    }
    export class QueryNFTRequest extends pb_1.Message {
        constructor(data?: any[] | {
            denom_id?: string;
            token_id?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("token_id" in data && data.token_id != undefined) {
                    this.token_id = data.token_id;
                }
            }
        }
        get denom_id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get token_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set token_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        static fromObject(data: {
            denom_id?: string;
            token_id?: string;
        }) {
            const message = new QueryNFTRequest({});
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.token_id != null) {
                message.token_id = data.token_id;
            }
            return message;
        }
        toObject() {
            const data: {
                denom_id?: string;
                token_id?: string;
            } = {};
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.token_id != null) {
                data.token_id = this.token_id;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(1, this.denom_id);
            if (typeof this.token_id === "string" && this.token_id.length)
                writer.writeString(2, this.token_id);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNFTRequest {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNFTRequest();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.denom_id = reader.readString();
                        break;
                    case 2:
                        message.token_id = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNFTRequest {
            return QueryNFTRequest.deserialize(bytes);
        }
    }
    export class QueryNFTResponse extends pb_1.Message {
        constructor(data?: any[] | {
            nft?: dependency_3.kynno.nft.BaseNFT;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("nft" in data && data.nft != undefined) {
                    this.nft = data.nft;
                }
            }
        }
        get nft() {
            return pb_1.Message.getWrapperField(this, dependency_3.kynno.nft.BaseNFT, 1) as dependency_3.kynno.nft.BaseNFT;
        }
        set nft(value: dependency_3.kynno.nft.BaseNFT) {
            pb_1.Message.setWrapperField(this, 1, value);
        }
        static fromObject(data: {
            nft?: ReturnType<typeof dependency_3.kynno.nft.BaseNFT.prototype.toObject>;
        }) {
            const message = new QueryNFTResponse({});
            if (data.nft != null) {
                message.nft = dependency_3.kynno.nft.BaseNFT.fromObject(data.nft);
            }
            return message;
        }
        toObject() {
            const data: {
                nft?: ReturnType<typeof dependency_3.kynno.nft.BaseNFT.prototype.toObject>;
            } = {};
            if (this.nft != null) {
                data.nft = this.nft.toObject();
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (this.nft !== undefined)
                writer.writeMessage(1, this.nft, () => this.nft.serialize(writer));
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): QueryNFTResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new QueryNFTResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        reader.readMessage(message.nft, () => message.nft = dependency_3.kynno.nft.BaseNFT.deserialize(reader));
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): QueryNFTResponse {
            return QueryNFTResponse.deserialize(bytes);
        }
    }
    interface GrpcUnaryServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
        (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    }
    interface GrpcStreamServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
        (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    }
    interface GrpWritableServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
        (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    }
    interface GrpcChunkServiceInterface<P, R> {
        (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
        (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    }
    interface GrpcPromiseServiceInterface<P, R> {
        (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
        (message: P, options?: grpc_1.CallOptions): Promise<R>;
    }
    export abstract class UnimplementedQueryService {
        static definition = {
            Supply: {
                path: "/kynno.nft.Query/Supply",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QuerySupplyRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QuerySupplyRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QuerySupplyResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QuerySupplyResponse.deserialize(new Uint8Array(bytes))
            },
            Owner: {
                path: "/kynno.nft.Query/Owner",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryOwnerRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryOwnerRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryOwnerResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryOwnerResponse.deserialize(new Uint8Array(bytes))
            },
            Collection: {
                path: "/kynno.nft.Query/Collection",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryCollectionRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryCollectionRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryCollectionResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryCollectionResponse.deserialize(new Uint8Array(bytes))
            },
            Denom: {
                path: "/kynno.nft.Query/Denom",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDenomRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDenomRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDenomResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDenomResponse.deserialize(new Uint8Array(bytes))
            },
            Denoms: {
                path: "/kynno.nft.Query/Denoms",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryDenomsRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryDenomsRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryDenomsResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryDenomsResponse.deserialize(new Uint8Array(bytes))
            },
            NFT: {
                path: "/kynno.nft.Query/NFT",
                requestStream: false,
                responseStream: false,
                requestSerialize: (message: QueryNFTRequest) => Buffer.from(message.serialize()),
                requestDeserialize: (bytes: Buffer) => QueryNFTRequest.deserialize(new Uint8Array(bytes)),
                responseSerialize: (message: QueryNFTResponse) => Buffer.from(message.serialize()),
                responseDeserialize: (bytes: Buffer) => QueryNFTResponse.deserialize(new Uint8Array(bytes))
            }
        };
        [method: string]: grpc_1.UntypedHandleCall;
        abstract Supply(call: grpc_1.ServerUnaryCall<QuerySupplyRequest, QuerySupplyResponse>, callback: grpc_1.sendUnaryData<QuerySupplyResponse>): void;
        abstract Owner(call: grpc_1.ServerUnaryCall<QueryOwnerRequest, QueryOwnerResponse>, callback: grpc_1.sendUnaryData<QueryOwnerResponse>): void;
        abstract Collection(call: grpc_1.ServerUnaryCall<QueryCollectionRequest, QueryCollectionResponse>, callback: grpc_1.sendUnaryData<QueryCollectionResponse>): void;
        abstract Denom(call: grpc_1.ServerUnaryCall<QueryDenomRequest, QueryDenomResponse>, callback: grpc_1.sendUnaryData<QueryDenomResponse>): void;
        abstract Denoms(call: grpc_1.ServerUnaryCall<QueryDenomsRequest, QueryDenomsResponse>, callback: grpc_1.sendUnaryData<QueryDenomsResponse>): void;
        abstract NFT(call: grpc_1.ServerUnaryCall<QueryNFTRequest, QueryNFTResponse>, callback: grpc_1.sendUnaryData<QueryNFTResponse>): void;
    }
    export class QueryClient extends grpc_1.makeGenericClientConstructor(UnimplementedQueryService.definition, "Query", {}) {
        constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
            super(address, credentials, options);
        }
        Supply: GrpcUnaryServiceInterface<QuerySupplyRequest, QuerySupplyResponse> = (message: QuerySupplyRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QuerySupplyResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QuerySupplyResponse>, callback?: grpc_1.requestCallback<QuerySupplyResponse>): grpc_1.ClientUnaryCall => {
            return super.Supply(message, metadata, options, callback);
        };
        Owner: GrpcUnaryServiceInterface<QueryOwnerRequest, QueryOwnerResponse> = (message: QueryOwnerRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryOwnerResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryOwnerResponse>, callback?: grpc_1.requestCallback<QueryOwnerResponse>): grpc_1.ClientUnaryCall => {
            return super.Owner(message, metadata, options, callback);
        };
        Collection: GrpcUnaryServiceInterface<QueryCollectionRequest, QueryCollectionResponse> = (message: QueryCollectionRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryCollectionResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryCollectionResponse>, callback?: grpc_1.requestCallback<QueryCollectionResponse>): grpc_1.ClientUnaryCall => {
            return super.Collection(message, metadata, options, callback);
        };
        Denom: GrpcUnaryServiceInterface<QueryDenomRequest, QueryDenomResponse> = (message: QueryDenomRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDenomResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDenomResponse>, callback?: grpc_1.requestCallback<QueryDenomResponse>): grpc_1.ClientUnaryCall => {
            return super.Denom(message, metadata, options, callback);
        };
        Denoms: GrpcUnaryServiceInterface<QueryDenomsRequest, QueryDenomsResponse> = (message: QueryDenomsRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryDenomsResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryDenomsResponse>, callback?: grpc_1.requestCallback<QueryDenomsResponse>): grpc_1.ClientUnaryCall => {
            return super.Denoms(message, metadata, options, callback);
        };
        NFT: GrpcUnaryServiceInterface<QueryNFTRequest, QueryNFTResponse> = (message: QueryNFTRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<QueryNFTResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<QueryNFTResponse>, callback?: grpc_1.requestCallback<QueryNFTResponse>): grpc_1.ClientUnaryCall => {
            return super.NFT(message, metadata, options, callback);
        };
    }
}
