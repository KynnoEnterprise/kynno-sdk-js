// @ts-nocheck
/* eslint-disable */
/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.6.1
 * source: kynno/nft/tx.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./../../gogoproto/gogo";
import * as pb_1 from "google-protobuf";
export namespace kynno.nft {
    export class MsgIssueDenom extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            name?: string;
            schema?: string;
            sender?: string;
            symbol?: string;
            mint_restricted?: boolean;
            update_restricted?: boolean;
            description?: string;
            uri?: string;
            uri_hash?: string;
            data?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("schema" in data && data.schema != undefined) {
                    this.schema = data.schema;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("symbol" in data && data.symbol != undefined) {
                    this.symbol = data.symbol;
                }
                if ("mint_restricted" in data && data.mint_restricted != undefined) {
                    this.mint_restricted = data.mint_restricted;
                }
                if ("update_restricted" in data && data.update_restricted != undefined) {
                    this.update_restricted = data.update_restricted;
                }
                if ("description" in data && data.description != undefined) {
                    this.description = data.description;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("uri_hash" in data && data.uri_hash != undefined) {
                    this.uri_hash = data.uri_hash;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get name() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get schema() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set schema(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get sender() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get symbol() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set symbol(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get mint_restricted() {
            return pb_1.Message.getField(this, 6) as boolean;
        }
        set mint_restricted(value: boolean) {
            pb_1.Message.setField(this, 6, value);
        }
        get update_restricted() {
            return pb_1.Message.getField(this, 7) as boolean;
        }
        set update_restricted(value: boolean) {
            pb_1.Message.setField(this, 7, value);
        }
        get description() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set description(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        get uri() {
            return pb_1.Message.getField(this, 9) as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 9, value);
        }
        get uri_hash() {
            return pb_1.Message.getField(this, 10) as string;
        }
        set uri_hash(value: string) {
            pb_1.Message.setField(this, 10, value);
        }
        get data() {
            return pb_1.Message.getField(this, 11) as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 11, value);
        }
        static fromObject(data: {
            id?: string;
            name?: string;
            schema?: string;
            sender?: string;
            symbol?: string;
            mint_restricted?: boolean;
            update_restricted?: boolean;
            description?: string;
            uri?: string;
            uri_hash?: string;
            data?: string;
        }) {
            const message = new MsgIssueDenom({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.schema != null) {
                message.schema = data.schema;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.symbol != null) {
                message.symbol = data.symbol;
            }
            if (data.mint_restricted != null) {
                message.mint_restricted = data.mint_restricted;
            }
            if (data.update_restricted != null) {
                message.update_restricted = data.update_restricted;
            }
            if (data.description != null) {
                message.description = data.description;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.uri_hash != null) {
                message.uri_hash = data.uri_hash;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                name?: string;
                schema?: string;
                sender?: string;
                symbol?: string;
                mint_restricted?: boolean;
                update_restricted?: boolean;
                description?: string;
                uri?: string;
                uri_hash?: string;
                data?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.schema != null) {
                data.schema = this.schema;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.symbol != null) {
                data.symbol = this.symbol;
            }
            if (this.mint_restricted != null) {
                data.mint_restricted = this.mint_restricted;
            }
            if (this.update_restricted != null) {
                data.update_restricted = this.update_restricted;
            }
            if (this.description != null) {
                data.description = this.description;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.uri_hash != null) {
                data.uri_hash = this.uri_hash;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(2, this.name);
            if (typeof this.schema === "string" && this.schema.length)
                writer.writeString(3, this.schema);
            if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(4, this.sender);
            if (typeof this.symbol === "string" && this.symbol.length)
                writer.writeString(5, this.symbol);
            if (this.mint_restricted !== undefined)
                writer.writeBool(6, this.mint_restricted);
            if (this.update_restricted !== undefined)
                writer.writeBool(7, this.update_restricted);
            if (typeof this.description === "string" && this.description.length)
                writer.writeString(8, this.description);
            if (typeof this.uri === "string" && this.uri.length)
                writer.writeString(9, this.uri);
            if (typeof this.uri_hash === "string" && this.uri_hash.length)
                writer.writeString(10, this.uri_hash);
            if (typeof this.data === "string" && this.data.length)
                writer.writeString(11, this.data);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgIssueDenom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgIssueDenom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.name = reader.readString();
                        break;
                    case 3:
                        message.schema = reader.readString();
                        break;
                    case 4:
                        message.sender = reader.readString();
                        break;
                    case 5:
                        message.symbol = reader.readString();
                        break;
                    case 6:
                        message.mint_restricted = reader.readBool();
                        break;
                    case 7:
                        message.update_restricted = reader.readBool();
                        break;
                    case 8:
                        message.description = reader.readString();
                        break;
                    case 9:
                        message.uri = reader.readString();
                        break;
                    case 10:
                        message.uri_hash = reader.readString();
                        break;
                    case 11:
                        message.data = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgIssueDenom {
            return MsgIssueDenom.deserialize(bytes);
        }
    }
    export class MsgIssueDenomResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgIssueDenomResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgIssueDenomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgIssueDenomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgIssueDenomResponse {
            return MsgIssueDenomResponse.deserialize(bytes);
        }
    }
    export class MsgTransferNFT extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            denom_id?: string;
            name?: string;
            uri?: string;
            data?: string;
            sender?: string;
            recipient?: string;
            uri_hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("uri_hash" in data && data.uri_hash != undefined) {
                    this.uri_hash = data.uri_hash;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get denom_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uri() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get data() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sender() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get uri_hash() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set uri_hash(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            denom_id?: string;
            name?: string;
            uri?: string;
            data?: string;
            sender?: string;
            recipient?: string;
            uri_hash?: string;
        }) {
            const message = new MsgTransferNFT({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.uri_hash != null) {
                message.uri_hash = data.uri_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                denom_id?: string;
                name?: string;
                uri?: string;
                data?: string;
                sender?: string;
                recipient?: string;
                uri_hash?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.uri_hash != null) {
                data.uri_hash = this.uri_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(2, this.denom_id);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(3, this.name);
            if (typeof this.uri === "string" && this.uri.length)
                writer.writeString(4, this.uri);
            if (typeof this.data === "string" && this.data.length)
                writer.writeString(5, this.data);
            if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(6, this.sender);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(7, this.recipient);
            if (typeof this.uri_hash === "string" && this.uri_hash.length)
                writer.writeString(8, this.uri_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferNFT {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferNFT();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.denom_id = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.uri = reader.readString();
                        break;
                    case 5:
                        message.data = reader.readString();
                        break;
                    case 6:
                        message.sender = reader.readString();
                        break;
                    case 7:
                        message.recipient = reader.readString();
                        break;
                    case 8:
                        message.uri_hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferNFT {
            return MsgTransferNFT.deserialize(bytes);
        }
    }
    export class MsgTransferNFTResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgTransferNFTResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferNFTResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferNFTResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferNFTResponse {
            return MsgTransferNFTResponse.deserialize(bytes);
        }
    }
    export class MsgEditNFT extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            denom_id?: string;
            name?: string;
            uri?: string;
            data?: string;
            sender?: string;
            uri_hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("uri_hash" in data && data.uri_hash != undefined) {
                    this.uri_hash = data.uri_hash;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get denom_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uri() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get data() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sender() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get uri_hash() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set uri_hash(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        static fromObject(data: {
            id?: string;
            denom_id?: string;
            name?: string;
            uri?: string;
            data?: string;
            sender?: string;
            uri_hash?: string;
        }) {
            const message = new MsgEditNFT({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.uri_hash != null) {
                message.uri_hash = data.uri_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                denom_id?: string;
                name?: string;
                uri?: string;
                data?: string;
                sender?: string;
                uri_hash?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.uri_hash != null) {
                data.uri_hash = this.uri_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(2, this.denom_id);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(3, this.name);
            if (typeof this.uri === "string" && this.uri.length)
                writer.writeString(4, this.uri);
            if (typeof this.data === "string" && this.data.length)
                writer.writeString(5, this.data);
            if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(6, this.sender);
            if (typeof this.uri_hash === "string" && this.uri_hash.length)
                writer.writeString(7, this.uri_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgEditNFT {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditNFT();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.denom_id = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.uri = reader.readString();
                        break;
                    case 5:
                        message.data = reader.readString();
                        break;
                    case 6:
                        message.sender = reader.readString();
                        break;
                    case 7:
                        message.uri_hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgEditNFT {
            return MsgEditNFT.deserialize(bytes);
        }
    }
    export class MsgEditNFTResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgEditNFTResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgEditNFTResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgEditNFTResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgEditNFTResponse {
            return MsgEditNFTResponse.deserialize(bytes);
        }
    }
    export class MsgMintNFT extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            denom_id?: string;
            name?: string;
            uri?: string;
            data?: string;
            sender?: string;
            recipient?: string;
            uri_hash?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("name" in data && data.name != undefined) {
                    this.name = data.name;
                }
                if ("uri" in data && data.uri != undefined) {
                    this.uri = data.uri;
                }
                if ("data" in data && data.data != undefined) {
                    this.data = data.data;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
                if ("uri_hash" in data && data.uri_hash != undefined) {
                    this.uri_hash = data.uri_hash;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get denom_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get name() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set name(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        get uri() {
            return pb_1.Message.getField(this, 4) as string;
        }
        set uri(value: string) {
            pb_1.Message.setField(this, 4, value);
        }
        get data() {
            return pb_1.Message.getField(this, 5) as string;
        }
        set data(value: string) {
            pb_1.Message.setField(this, 5, value);
        }
        get sender() {
            return pb_1.Message.getField(this, 6) as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 6, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 7) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 7, value);
        }
        get uri_hash() {
            return pb_1.Message.getField(this, 8) as string;
        }
        set uri_hash(value: string) {
            pb_1.Message.setField(this, 8, value);
        }
        static fromObject(data: {
            id?: string;
            denom_id?: string;
            name?: string;
            uri?: string;
            data?: string;
            sender?: string;
            recipient?: string;
            uri_hash?: string;
        }) {
            const message = new MsgMintNFT({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.name != null) {
                message.name = data.name;
            }
            if (data.uri != null) {
                message.uri = data.uri;
            }
            if (data.data != null) {
                message.data = data.data;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            if (data.uri_hash != null) {
                message.uri_hash = data.uri_hash;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                denom_id?: string;
                name?: string;
                uri?: string;
                data?: string;
                sender?: string;
                recipient?: string;
                uri_hash?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.name != null) {
                data.name = this.name;
            }
            if (this.uri != null) {
                data.uri = this.uri;
            }
            if (this.data != null) {
                data.data = this.data;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            if (this.uri_hash != null) {
                data.uri_hash = this.uri_hash;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(2, this.denom_id);
            if (typeof this.name === "string" && this.name.length)
                writer.writeString(3, this.name);
            if (typeof this.uri === "string" && this.uri.length)
                writer.writeString(4, this.uri);
            if (typeof this.data === "string" && this.data.length)
                writer.writeString(5, this.data);
            if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(6, this.sender);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(7, this.recipient);
            if (typeof this.uri_hash === "string" && this.uri_hash.length)
                writer.writeString(8, this.uri_hash);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgMintNFT {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMintNFT();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.denom_id = reader.readString();
                        break;
                    case 3:
                        message.name = reader.readString();
                        break;
                    case 4:
                        message.uri = reader.readString();
                        break;
                    case 5:
                        message.data = reader.readString();
                        break;
                    case 6:
                        message.sender = reader.readString();
                        break;
                    case 7:
                        message.recipient = reader.readString();
                        break;
                    case 8:
                        message.uri_hash = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgMintNFT {
            return MsgMintNFT.deserialize(bytes);
        }
    }
    export class MsgMintNFTResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgMintNFTResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgMintNFTResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgMintNFTResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgMintNFTResponse {
            return MsgMintNFTResponse.deserialize(bytes);
        }
    }
    export class MsgBurnNFT extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            denom_id?: string;
            sender?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("denom_id" in data && data.denom_id != undefined) {
                    this.denom_id = data.denom_id;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get denom_id() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set denom_id(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get sender() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            denom_id?: string;
            sender?: string;
        }) {
            const message = new MsgBurnNFT({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.denom_id != null) {
                message.denom_id = data.denom_id;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                denom_id?: string;
                sender?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.denom_id != null) {
                data.denom_id = this.denom_id;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.denom_id === "string" && this.denom_id.length)
                writer.writeString(2, this.denom_id);
            if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(3, this.sender);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgBurnNFT {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgBurnNFT();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.denom_id = reader.readString();
                        break;
                    case 3:
                        message.sender = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgBurnNFT {
            return MsgBurnNFT.deserialize(bytes);
        }
    }
    export class MsgBurnNFTResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgBurnNFTResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgBurnNFTResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgBurnNFTResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgBurnNFTResponse {
            return MsgBurnNFTResponse.deserialize(bytes);
        }
    }
    export class MsgTransferDenom extends pb_1.Message {
        constructor(data?: any[] | {
            id?: string;
            sender?: string;
            recipient?: string;
        }) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") {
                if ("id" in data && data.id != undefined) {
                    this.id = data.id;
                }
                if ("sender" in data && data.sender != undefined) {
                    this.sender = data.sender;
                }
                if ("recipient" in data && data.recipient != undefined) {
                    this.recipient = data.recipient;
                }
            }
        }
        get id() {
            return pb_1.Message.getField(this, 1) as string;
        }
        set id(value: string) {
            pb_1.Message.setField(this, 1, value);
        }
        get sender() {
            return pb_1.Message.getField(this, 2) as string;
        }
        set sender(value: string) {
            pb_1.Message.setField(this, 2, value);
        }
        get recipient() {
            return pb_1.Message.getField(this, 3) as string;
        }
        set recipient(value: string) {
            pb_1.Message.setField(this, 3, value);
        }
        static fromObject(data: {
            id?: string;
            sender?: string;
            recipient?: string;
        }) {
            const message = new MsgTransferDenom({});
            if (data.id != null) {
                message.id = data.id;
            }
            if (data.sender != null) {
                message.sender = data.sender;
            }
            if (data.recipient != null) {
                message.recipient = data.recipient;
            }
            return message;
        }
        toObject() {
            const data: {
                id?: string;
                sender?: string;
                recipient?: string;
            } = {};
            if (this.id != null) {
                data.id = this.id;
            }
            if (this.sender != null) {
                data.sender = this.sender;
            }
            if (this.recipient != null) {
                data.recipient = this.recipient;
            }
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (typeof this.id === "string" && this.id.length)
                writer.writeString(1, this.id);
            if (typeof this.sender === "string" && this.sender.length)
                writer.writeString(2, this.sender);
            if (typeof this.recipient === "string" && this.recipient.length)
                writer.writeString(3, this.recipient);
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferDenom {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferDenom();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    case 1:
                        message.id = reader.readString();
                        break;
                    case 2:
                        message.sender = reader.readString();
                        break;
                    case 3:
                        message.recipient = reader.readString();
                        break;
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferDenom {
            return MsgTransferDenom.deserialize(bytes);
        }
    }
    export class MsgTransferDenomResponse extends pb_1.Message {
        constructor(data?: any[] | {}) {
            super();
            pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], []);
            if (!Array.isArray(data) && typeof data == "object") { }
        }
        static fromObject(data: {}) {
            const message = new MsgTransferDenomResponse({});
            return message;
        }
        toObject() {
            const data: {} = {};
            return data;
        }
        serialize(): Uint8Array;
        serialize(w: pb_1.BinaryWriter): void;
        serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
            const writer = w || new pb_1.BinaryWriter();
            if (!w)
                return writer.getResultBuffer();
        }
        static deserialize(bytes: Uint8Array | pb_1.BinaryReader): MsgTransferDenomResponse {
            const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new MsgTransferDenomResponse();
            while (reader.nextField()) {
                if (reader.isEndGroup())
                    break;
                switch (reader.getFieldNumber()) {
                    default: reader.skipField();
                }
            }
            return message;
        }
        serializeBinary(): Uint8Array {
            return this.serialize();
        }
        static deserializeBinary(bytes: Uint8Array): MsgTransferDenomResponse {
            return MsgTransferDenomResponse.deserialize(bytes);
        }
    }
}
