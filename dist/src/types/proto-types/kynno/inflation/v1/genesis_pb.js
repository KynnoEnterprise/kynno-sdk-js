/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
var kynno_inflation_v1_inflation_pb = require('../../../kynno/inflation/v1/inflation_pb.js');
goog.exportSymbol('proto.kynno.inflation.v1.GenesisState', null, global);
goog.exportSymbol('proto.kynno.inflation.v1.Params', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.inflation.v1.GenesisState = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.inflation.v1.GenesisState, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.inflation.v1.GenesisState.displayName = 'proto.kynno.inflation.v1.GenesisState';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.inflation.v1.GenesisState.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.inflation.v1.GenesisState.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.inflation.v1.GenesisState} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.inflation.v1.GenesisState.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && proto.kynno.inflation.v1.Params.toObject(includeInstance, f),
    period: jspb.Message.getFieldWithDefault(msg, 2, 0),
    epochIdentifier: jspb.Message.getFieldWithDefault(msg, 3, ""),
    epochsPerPeriod: jspb.Message.getFieldWithDefault(msg, 4, 0),
    skippedEpochs: jspb.Message.getFieldWithDefault(msg, 5, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.inflation.v1.GenesisState}
 */
proto.kynno.inflation.v1.GenesisState.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.inflation.v1.GenesisState;
  return proto.kynno.inflation.v1.GenesisState.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.inflation.v1.GenesisState} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.inflation.v1.GenesisState}
 */
proto.kynno.inflation.v1.GenesisState.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.kynno.inflation.v1.Params;
      reader.readMessage(value,proto.kynno.inflation.v1.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setPeriod(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEpochIdentifier(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setEpochsPerPeriod(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint64());
      msg.setSkippedEpochs(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.inflation.v1.GenesisState.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.inflation.v1.GenesisState.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.inflation.v1.GenesisState} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.inflation.v1.GenesisState.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.kynno.inflation.v1.Params.serializeBinaryToWriter
    );
  }
  f = message.getPeriod();
  if (f !== 0) {
    writer.writeUint64(
      2,
      f
    );
  }
  f = message.getEpochIdentifier();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getEpochsPerPeriod();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSkippedEpochs();
  if (f !== 0) {
    writer.writeUint64(
      5,
      f
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.kynno.inflation.v1.Params}
 */
proto.kynno.inflation.v1.GenesisState.prototype.getParams = function() {
  return /** @type{?proto.kynno.inflation.v1.Params} */ (
    jspb.Message.getWrapperField(this, proto.kynno.inflation.v1.Params, 1));
};


/** @param {?proto.kynno.inflation.v1.Params|undefined} value */
proto.kynno.inflation.v1.GenesisState.prototype.setParams = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.kynno.inflation.v1.GenesisState.prototype.clearParams = function() {
  this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.kynno.inflation.v1.GenesisState.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint64 period = 2;
 * @return {number}
 */
proto.kynno.inflation.v1.GenesisState.prototype.getPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.kynno.inflation.v1.GenesisState.prototype.setPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional string epoch_identifier = 3;
 * @return {string}
 */
proto.kynno.inflation.v1.GenesisState.prototype.getEpochIdentifier = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/** @param {string} value */
proto.kynno.inflation.v1.GenesisState.prototype.setEpochIdentifier = function(value) {
  jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int64 epochs_per_period = 4;
 * @return {number}
 */
proto.kynno.inflation.v1.GenesisState.prototype.getEpochsPerPeriod = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.kynno.inflation.v1.GenesisState.prototype.setEpochsPerPeriod = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint64 skipped_epochs = 5;
 * @return {number}
 */
proto.kynno.inflation.v1.GenesisState.prototype.getSkippedEpochs = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.kynno.inflation.v1.GenesisState.prototype.setSkippedEpochs = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.inflation.v1.Params = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.inflation.v1.Params, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.inflation.v1.Params.displayName = 'proto.kynno.inflation.v1.Params';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.inflation.v1.Params.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.inflation.v1.Params.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.inflation.v1.Params} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.inflation.v1.Params.toObject = function(includeInstance, msg) {
  var f, obj = {
    mintDenom: jspb.Message.getFieldWithDefault(msg, 1, ""),
    exponentialCalculation: (f = msg.getExponentialCalculation()) && kynno_inflation_v1_inflation_pb.ExponentialCalculation.toObject(includeInstance, f),
    inflationDistribution: (f = msg.getInflationDistribution()) && kynno_inflation_v1_inflation_pb.InflationDistribution.toObject(includeInstance, f),
    enableInflation: jspb.Message.getFieldWithDefault(msg, 4, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.inflation.v1.Params}
 */
proto.kynno.inflation.v1.Params.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.inflation.v1.Params;
  return proto.kynno.inflation.v1.Params.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.inflation.v1.Params} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.inflation.v1.Params}
 */
proto.kynno.inflation.v1.Params.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMintDenom(value);
      break;
    case 2:
      var value = new kynno_inflation_v1_inflation_pb.ExponentialCalculation;
      reader.readMessage(value,kynno_inflation_v1_inflation_pb.ExponentialCalculation.deserializeBinaryFromReader);
      msg.setExponentialCalculation(value);
      break;
    case 3:
      var value = new kynno_inflation_v1_inflation_pb.InflationDistribution;
      reader.readMessage(value,kynno_inflation_v1_inflation_pb.InflationDistribution.deserializeBinaryFromReader);
      msg.setInflationDistribution(value);
      break;
    case 4:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setEnableInflation(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.inflation.v1.Params.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.inflation.v1.Params.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.inflation.v1.Params} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.inflation.v1.Params.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMintDenom();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getExponentialCalculation();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      kynno_inflation_v1_inflation_pb.ExponentialCalculation.serializeBinaryToWriter
    );
  }
  f = message.getInflationDistribution();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      kynno_inflation_v1_inflation_pb.InflationDistribution.serializeBinaryToWriter
    );
  }
  f = message.getEnableInflation();
  if (f) {
    writer.writeBool(
      4,
      f
    );
  }
};


/**
 * optional string mint_denom = 1;
 * @return {string}
 */
proto.kynno.inflation.v1.Params.prototype.getMintDenom = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.kynno.inflation.v1.Params.prototype.setMintDenom = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional ExponentialCalculation exponential_calculation = 2;
 * @return {?proto.kynno.inflation.v1.ExponentialCalculation}
 */
proto.kynno.inflation.v1.Params.prototype.getExponentialCalculation = function() {
  return /** @type{?proto.kynno.inflation.v1.ExponentialCalculation} */ (
    jspb.Message.getWrapperField(this, kynno_inflation_v1_inflation_pb.ExponentialCalculation, 2));
};


/** @param {?proto.kynno.inflation.v1.ExponentialCalculation|undefined} value */
proto.kynno.inflation.v1.Params.prototype.setExponentialCalculation = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.kynno.inflation.v1.Params.prototype.clearExponentialCalculation = function() {
  this.setExponentialCalculation(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.kynno.inflation.v1.Params.prototype.hasExponentialCalculation = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional InflationDistribution inflation_distribution = 3;
 * @return {?proto.kynno.inflation.v1.InflationDistribution}
 */
proto.kynno.inflation.v1.Params.prototype.getInflationDistribution = function() {
  return /** @type{?proto.kynno.inflation.v1.InflationDistribution} */ (
    jspb.Message.getWrapperField(this, kynno_inflation_v1_inflation_pb.InflationDistribution, 3));
};


/** @param {?proto.kynno.inflation.v1.InflationDistribution|undefined} value */
proto.kynno.inflation.v1.Params.prototype.setInflationDistribution = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.kynno.inflation.v1.Params.prototype.clearInflationDistribution = function() {
  this.setInflationDistribution(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.kynno.inflation.v1.Params.prototype.hasInflationDistribution = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional bool enable_inflation = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.kynno.inflation.v1.Params.prototype.getEnableInflation = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 4, false));
};


/** @param {boolean} value */
proto.kynno.inflation.v1.Params.prototype.setEnableInflation = function(value) {
  jspb.Message.setProto3BooleanField(this, 4, value);
};


goog.object.extend(exports, proto.kynno.inflation.v1);
