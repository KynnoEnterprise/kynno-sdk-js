/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gogoproto_gogo_pb = require('../../../gogoproto/gogo_pb.js');
var google_api_annotations_pb = require('../../../google/api/annotations_pb.js');
var cosmos_base_query_v1beta1_pagination_pb = require('../../../cosmos/base/query/v1beta1/pagination_pb.js');
var cosmos_base_v1beta1_coin_pb = require('../../../cosmos/base/v1beta1/coin_pb.js');
var kynno_claims_v1_claims_pb = require('../../../kynno/claims/v1/claims_pb.js');
var kynno_claims_v1_genesis_pb = require('../../../kynno/claims/v1/genesis_pb.js');
goog.exportSymbol('proto.kynno.claims.v1.QueryClaimsRecordRequest', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryClaimsRecordResponse', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryClaimsRecordsRequest', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryClaimsRecordsResponse', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryParamsRequest', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryParamsResponse', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryTotalUnclaimedRequest', null, global);
goog.exportSymbol('proto.kynno.claims.v1.QueryTotalUnclaimedResponse', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.claims.v1.QueryTotalUnclaimedRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryTotalUnclaimedRequest.displayName = 'proto.kynno.claims.v1.QueryTotalUnclaimedRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryTotalUnclaimedRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryTotalUnclaimedRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryTotalUnclaimedRequest}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryTotalUnclaimedRequest;
  return proto.kynno.claims.v1.QueryTotalUnclaimedRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryTotalUnclaimedRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryTotalUnclaimedRequest}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryTotalUnclaimedRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryTotalUnclaimedRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryTotalUnclaimedRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kynno.claims.v1.QueryTotalUnclaimedResponse.repeatedFields_, null);
};
goog.inherits(proto.kynno.claims.v1.QueryTotalUnclaimedResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryTotalUnclaimedResponse.displayName = 'proto.kynno.claims.v1.QueryTotalUnclaimedResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryTotalUnclaimedResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryTotalUnclaimedResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    coinsList: jspb.Message.toObjectList(msg.getCoinsList(),
    cosmos_base_v1beta1_coin_pb.Coin.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryTotalUnclaimedResponse}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryTotalUnclaimedResponse;
  return proto.kynno.claims.v1.QueryTotalUnclaimedResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryTotalUnclaimedResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryTotalUnclaimedResponse}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_v1beta1_coin_pb.Coin;
      reader.readMessage(value,cosmos_base_v1beta1_coin_pb.Coin.deserializeBinaryFromReader);
      msg.addCoins(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryTotalUnclaimedResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryTotalUnclaimedResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getCoinsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      cosmos_base_v1beta1_coin_pb.Coin.serializeBinaryToWriter
    );
  }
};


/**
 * repeated cosmos.base.v1beta1.Coin coins = 1;
 * @return {!Array<!proto.cosmos.base.v1beta1.Coin>}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.prototype.getCoinsList = function() {
  return /** @type{!Array<!proto.cosmos.base.v1beta1.Coin>} */ (
    jspb.Message.getRepeatedWrapperField(this, cosmos_base_v1beta1_coin_pb.Coin, 1));
};


/** @param {!Array<!proto.cosmos.base.v1beta1.Coin>} value */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.prototype.setCoinsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.cosmos.base.v1beta1.Coin=} opt_value
 * @param {number=} opt_index
 * @return {!proto.cosmos.base.v1beta1.Coin}
 */
proto.kynno.claims.v1.QueryTotalUnclaimedResponse.prototype.addCoins = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.cosmos.base.v1beta1.Coin, opt_index);
};


proto.kynno.claims.v1.QueryTotalUnclaimedResponse.prototype.clearCoinsList = function() {
  this.setCoinsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryParamsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.claims.v1.QueryParamsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryParamsRequest.displayName = 'proto.kynno.claims.v1.QueryParamsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryParamsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryParamsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryParamsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryParamsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryParamsRequest}
 */
proto.kynno.claims.v1.QueryParamsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryParamsRequest;
  return proto.kynno.claims.v1.QueryParamsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryParamsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryParamsRequest}
 */
proto.kynno.claims.v1.QueryParamsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryParamsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryParamsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryParamsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryParamsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryParamsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.claims.v1.QueryParamsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryParamsResponse.displayName = 'proto.kynno.claims.v1.QueryParamsResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryParamsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryParamsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryParamsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryParamsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    params: (f = msg.getParams()) && kynno_claims_v1_genesis_pb.Params.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryParamsResponse}
 */
proto.kynno.claims.v1.QueryParamsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryParamsResponse;
  return proto.kynno.claims.v1.QueryParamsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryParamsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryParamsResponse}
 */
proto.kynno.claims.v1.QueryParamsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new kynno_claims_v1_genesis_pb.Params;
      reader.readMessage(value,kynno_claims_v1_genesis_pb.Params.deserializeBinaryFromReader);
      msg.setParams(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryParamsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryParamsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryParamsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryParamsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParams();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      kynno_claims_v1_genesis_pb.Params.serializeBinaryToWriter
    );
  }
};


/**
 * optional Params params = 1;
 * @return {?proto.kynno.claims.v1.Params}
 */
proto.kynno.claims.v1.QueryParamsResponse.prototype.getParams = function() {
  return /** @type{?proto.kynno.claims.v1.Params} */ (
    jspb.Message.getWrapperField(this, kynno_claims_v1_genesis_pb.Params, 1));
};


/** @param {?proto.kynno.claims.v1.Params|undefined} value */
proto.kynno.claims.v1.QueryParamsResponse.prototype.setParams = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.kynno.claims.v1.QueryParamsResponse.prototype.clearParams = function() {
  this.setParams(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.kynno.claims.v1.QueryParamsResponse.prototype.hasParams = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.claims.v1.QueryClaimsRecordsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryClaimsRecordsRequest.displayName = 'proto.kynno.claims.v1.QueryClaimsRecordsRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryClaimsRecordsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    pagination: (f = msg.getPagination()) && cosmos_base_query_v1beta1_pagination_pb.PageRequest.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordsRequest}
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryClaimsRecordsRequest;
  return proto.kynno.claims.v1.QueryClaimsRecordsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordsRequest}
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new cosmos_base_query_v1beta1_pagination_pb.PageRequest;
      reader.readMessage(value,cosmos_base_query_v1beta1_pagination_pb.PageRequest.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryClaimsRecordsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      cosmos_base_query_v1beta1_pagination_pb.PageRequest.serializeBinaryToWriter
    );
  }
};


/**
 * optional cosmos.base.query.v1beta1.PageRequest pagination = 1;
 * @return {?proto.cosmos.base.query.v1beta1.PageRequest}
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.prototype.getPagination = function() {
  return /** @type{?proto.cosmos.base.query.v1beta1.PageRequest} */ (
    jspb.Message.getWrapperField(this, cosmos_base_query_v1beta1_pagination_pb.PageRequest, 1));
};


/** @param {?proto.cosmos.base.query.v1beta1.PageRequest|undefined} value */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.kynno.claims.v1.QueryClaimsRecordsRequest.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.kynno.claims.v1.QueryClaimsRecordsRequest.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 1) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kynno.claims.v1.QueryClaimsRecordsResponse.repeatedFields_, null);
};
goog.inherits(proto.kynno.claims.v1.QueryClaimsRecordsResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryClaimsRecordsResponse.displayName = 'proto.kynno.claims.v1.QueryClaimsRecordsResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryClaimsRecordsResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordsResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    kynno_claims_v1_claims_pb.ClaimsRecordAddress.toObject, includeInstance),
    pagination: (f = msg.getPagination()) && cosmos_base_query_v1beta1_pagination_pb.PageResponse.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordsResponse}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryClaimsRecordsResponse;
  return proto.kynno.claims.v1.QueryClaimsRecordsResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordsResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordsResponse}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new kynno_claims_v1_claims_pb.ClaimsRecordAddress;
      reader.readMessage(value,kynno_claims_v1_claims_pb.ClaimsRecordAddress.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    case 2:
      var value = new cosmos_base_query_v1beta1_pagination_pb.PageResponse;
      reader.readMessage(value,cosmos_base_query_v1beta1_pagination_pb.PageResponse.deserializeBinaryFromReader);
      msg.setPagination(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryClaimsRecordsResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordsResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      kynno_claims_v1_claims_pb.ClaimsRecordAddress.serializeBinaryToWriter
    );
  }
  f = message.getPagination();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      cosmos_base_query_v1beta1_pagination_pb.PageResponse.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ClaimsRecordAddress claims = 1;
 * @return {!Array<!proto.kynno.claims.v1.ClaimsRecordAddress>}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.kynno.claims.v1.ClaimsRecordAddress>} */ (
    jspb.Message.getRepeatedWrapperField(this, kynno_claims_v1_claims_pb.ClaimsRecordAddress, 1));
};


/** @param {!Array<!proto.kynno.claims.v1.ClaimsRecordAddress>} value */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.kynno.claims.v1.ClaimsRecordAddress=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kynno.claims.v1.ClaimsRecordAddress}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.kynno.claims.v1.ClaimsRecordAddress, opt_index);
};


proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};


/**
 * optional cosmos.base.query.v1beta1.PageResponse pagination = 2;
 * @return {?proto.cosmos.base.query.v1beta1.PageResponse}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.getPagination = function() {
  return /** @type{?proto.cosmos.base.query.v1beta1.PageResponse} */ (
    jspb.Message.getWrapperField(this, cosmos_base_query_v1beta1_pagination_pb.PageResponse, 2));
};


/** @param {?proto.cosmos.base.query.v1beta1.PageResponse|undefined} value */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.setPagination = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.clearPagination = function() {
  this.setPagination(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.kynno.claims.v1.QueryClaimsRecordsResponse.prototype.hasPagination = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.kynno.claims.v1.QueryClaimsRecordRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryClaimsRecordRequest.displayName = 'proto.kynno.claims.v1.QueryClaimsRecordRequest';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryClaimsRecordRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    address: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordRequest}
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryClaimsRecordRequest;
  return proto.kynno.claims.v1.QueryClaimsRecordRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordRequest}
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAddress(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryClaimsRecordRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAddress();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string address = 1;
 * @return {string}
 */
proto.kynno.claims.v1.QueryClaimsRecordRequest.prototype.getAddress = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.kynno.claims.v1.QueryClaimsRecordRequest.prototype.setAddress = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.kynno.claims.v1.QueryClaimsRecordResponse.repeatedFields_, null);
};
goog.inherits(proto.kynno.claims.v1.QueryClaimsRecordResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.kynno.claims.v1.QueryClaimsRecordResponse.displayName = 'proto.kynno.claims.v1.QueryClaimsRecordResponse';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.kynno.claims.v1.QueryClaimsRecordResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    initialClaimableAmount: jspb.Message.getFieldWithDefault(msg, 1, ""),
    claimsList: jspb.Message.toObjectList(msg.getClaimsList(),
    kynno_claims_v1_claims_pb.Claim.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordResponse}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.kynno.claims.v1.QueryClaimsRecordResponse;
  return proto.kynno.claims.v1.QueryClaimsRecordResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.kynno.claims.v1.QueryClaimsRecordResponse}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setInitialClaimableAmount(value);
      break;
    case 2:
      var value = new kynno_claims_v1_claims_pb.Claim;
      reader.readMessage(value,kynno_claims_v1_claims_pb.Claim.deserializeBinaryFromReader);
      msg.addClaims(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.kynno.claims.v1.QueryClaimsRecordResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.kynno.claims.v1.QueryClaimsRecordResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getInitialClaimableAmount();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getClaimsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      kynno_claims_v1_claims_pb.Claim.serializeBinaryToWriter
    );
  }
};


/**
 * optional string initial_claimable_amount = 1;
 * @return {string}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.getInitialClaimableAmount = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/** @param {string} value */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.setInitialClaimableAmount = function(value) {
  jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * repeated Claim claims = 2;
 * @return {!Array<!proto.kynno.claims.v1.Claim>}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.getClaimsList = function() {
  return /** @type{!Array<!proto.kynno.claims.v1.Claim>} */ (
    jspb.Message.getRepeatedWrapperField(this, kynno_claims_v1_claims_pb.Claim, 2));
};


/** @param {!Array<!proto.kynno.claims.v1.Claim>} value */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.setClaimsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


/**
 * @param {!proto.kynno.claims.v1.Claim=} opt_value
 * @param {number=} opt_index
 * @return {!proto.kynno.claims.v1.Claim}
 */
proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.addClaims = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 2, opt_value, proto.kynno.claims.v1.Claim, opt_index);
};


proto.kynno.claims.v1.QueryClaimsRecordResponse.prototype.clearClaimsList = function() {
  this.setClaimsList([]);
};


goog.object.extend(exports, proto.kynno.claims.v1);
